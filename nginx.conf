# worker进程的数量，一般与cpu的核心数相同
worker_processes  8;

events {
    # 每个work进程可以创建的connection数量
    worker_connections  1024;
}


http {
    # 引用另一个配置文件，mime.types指明文件后缀名和类型的映射关系
    include       mime.types;
    # 默认的type，如果一个文件的后缀名不在mime.types文件中有对应的配置，就会使用默认type
    default_type  application/octet-stream;

    # zero copy
    sendfile        on;
   
    keepalive_timeout  65;

    upstream service1 {
        server localhost:8001 weight=3;
        server localhost:8002 weight=1;
        server localhost:8003 weight=1;
    }

    # 可以配置多个server
    server {
        listen       80;
        server_name  www.baidu.com www.aaa.com www.bbb.com;

        # uri配置
        location / {
            # 从哪个目录下找资源
            root   /home/sky/Workspace/nginx/my_site;
            # 默认资源
            index  index.html index.htm;
        }
    }

    server {
        listen       80;
        server_name  *.taobao.com;

        location / {
            root   /home/sky/Workspace/nginx/new_site;
            index  index.html;
        }
    }

    server {
        listen       80;
        server_name  localhost;

        # 静态资源直接由nginx响应
        # 静态资源放到越靠前越好，放在后面的service中会增加网络开销，静态资源也没有必要让nginx做一层中转
        # 但需要在前端deploy时把静态资源copy到nginx所在的server中
        location / {
            root   /home/sky/Workspace/nginx/my_site;
            index  index.html index.htm;
        }

        # 动态资源才需要转发给后面的service
        location /api {
            # url rewrite，nginx会将收到的请求url修改之后再转发给后面的service
            # 在本例中，对于匹配正则的请求，后面service收到的请求url类似 /service_api?id=100
            # $1 表示取第一处匹配规则的值
            # flag除了break外，还有last、redirect、permanent
            # last 本条规则匹配完成后，继续向下匹配新的规则
            # break 本条规则匹配完成即终止，不会继续向下匹配新的规则
            # redirect 返回302临时重定向，浏览器地址会限制跳转后的url地址
            # permanent 返回301永久重定向，浏览器地址会限制跳转后的url地址
            rewrite    ^/api/([0-9]+).html$ /service_api?id=$1  break;
            proxy_pass http://service1;
        }
    }
}